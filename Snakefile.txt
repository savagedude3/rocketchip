SAMPLES=["INPUT SAMPLE NUMBERS HERE", "ANOTHER SAMPLE FOR EXAMPLE"]

rule all:
    input: 
        expand("{sample}.bw", sample=SAMPLES)

rule download_data:
    conda: ############### SRA_toolkit
    input: ############### list of desired SRAs
    output: "{sample}.sra"
    shell: "prefetch {input}"

rule split_paired_reads:
    conda: ###### SRA_toolkit
    input: "{sample}.sra"
    output:
    shell: ##### "fastq-dump ~/Code/Rotation_2_Project/SRA_Toolkit/sra/{SRA Code}.sra --split-files --outdir ../files"

rule gzip_data:
    input: 
    output:
    shell: #### "gzip files/SRR*"

rule download_genome:
    output: "mm39.chromFa.tar.gz"
    shell: "wget https://hgdownload.soe.ucsc.edu/goldenPath/mm39/bigZips/mm39.chromFa.tar.gz"
    
rule decompress_genome:
    input: "mm39.chromFa.tar.gz"
    output: #######
    shell: "tar zvfx {input}"

rule concatenate_chromosomes:
    input: ######
    output: "mm39.fa"
    shell: "cat *.fa > {output}" #######

rule delete_chromosome_files:
    input:
    output:
    shell: "rm chr*.fa   " ###### 
    
rule set_alignment_reference:
    conda: ############ BWA
    input: "mm39.fa"
    output:
    shell: "bwa index -p mm39 -a bwtsw {input}" 

rule align_reads:
    conda: ###### BWA
    input:
        r1 = "{sample}_1.fastq.gz",
        r2 = "{sample}_2.fastq.gz"
    output: "{sample}.sam"
    shell: "bwa mem mm39 {sample}_1.fastq.gz {sample}_2.fastq.gz > {sample}.sam"
    
rule sam_to_bam:
    conda: ############samtools
    input: "{sample}.sam"
    output: "{sample}.bam"
    shell: "samtools view -b {input} > {output}"

rule sam_fixmate:
    conda:############samtools
    input: "{sample}.bam"
    output: "{sample}.namesorted.fixmate.bam"
    shell: "samtools fixmate -rcm -O bam {input} {output}"

rule sam_sort:
    conda:############samtools
    input: "{sample}.namesorted.fixmate.bam"
    output: "{sample}.coorsorted.fixmate.bam "
    shell: "samtools sort -o {output} {input}"

rule sam_markdup:
    conda:############samtools
    input: "{sample}.coorsorted.fixmate.bam"
    output: "{sample}.coorsorted.dedup.bam"
    shell: "samtools markdup -r --mode s {input} {output}"

rule sam_index:
    conda:############samtools
    input: "{sample}.coorsorted.dedup.bam"
    output: "{sample}.indexed.dedup.bam"
    shell: "samtools index {input}"

rule bam_to_bigwig:
    conda: ##########deeptools
    input: "{sample}.indexed.dedup.bam"
    output: "{sample}.bw"
    shell: "bamCoverage -b {input} -o {output}"
